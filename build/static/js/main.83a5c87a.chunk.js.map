{"version":3,"sources":["ChatHeader.js","features/userSlice.js","Message.js","features/appSlice.js","firebase.js","Chat.js","SidebarChannel.js","Sidebar.js","Login.js","axios.js","Row.js","request.js","Banner.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["ChatHeader","channelName","className","userSlice","createSlice","name","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","Message","timestamp","message","Avatar","src","photo","displayName","Date","toDate","toUTCString","appSlice","channelId","setChannelInfo","selectChannelId","app","selectChannelName","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Chat","useSelector","useState","input","setInput","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","value","disabled","onChange","e","target","placeholder","type","onClick","preventDefault","add","FieldValue","serverTimestamp","SidebarChannel","id","dispatch","useDispatch","Sidebar","channels","setChannels","channel","signOut","prompt","key","Login","alt","Button","signInWithPopup","catch","error","alert","instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","a","get","request","results","fetchData","movie","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","handleClick","poster_path","backdrop_path","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","Banner","str","n","setMovie","Math","floor","random","length","style","backgroudSize","backgroundPosition","backgroundImage","original_name","overview","substr","App","onAuthStateChanged","authUser","console","log","uid","photoURL","email","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83a5c87a.chunk.js","sourcesContent":["import React from 'react'\nimport './ChatHeader.css'\n\n\n\n\nfunction ChatHeader({ channelName  }) {\n    return (\n        <div className=\"chatHeader\">\n           \n\n            <div className=\"chatHeader__left\">\n                <h3><span className=\"chatHeader__hash\">\n                    #\n                    </span>\n                    {channelName}\n                    \n                    </h3>\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default ChatHeader\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const userSlice = createSlice({\n\n  name: \"user\",\n  initialState: {\n    user: null,\n\n  },\n\n  reducers: {\n\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n\n    logout: (state) => {\n      state.user = null;\n    },\n  },\n});\n\n\nexport const { login, logout } = userSlice.actions;\n\n\nexport const selectUser = (state) => state.user.user;\n\n\nexport default userSlice.reducer;\n","import { Avatar } from \"@material-ui/core\";\nimport React from \"react\";\nimport \"./Message.css\";\n\nfunction Message({ timestamp, user, message }) {\n  return (\n    <div className=\"message\">\n      <Avatar src={user.photo} />\n      <div className=\"message__info\">\n        <h4>\n          {user.displayName}\n          \n          \n        </h4>\n        <h3><span className=\"message__timestamp\">\n            {new Date(timestamp?.toDate()).toUTCString()}\n          </span></h3>\n        <p>{message}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Message;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const appSlice = createSlice({\n  name: \"app\",\n  initialState: {\n    channelId: null,\n    channelName: null,\n  },\n  reducers: {\n    setChannelInfo: (state, action) => {\n      state.channelId = action.payload.channelId;\n      state.channelName = action.payload.channelName;\n    },\n  },\n});\n\nexport const { setChannelInfo } = appSlice.actions;\n\nexport const selectChannelId = (state) => state.app.channelId;\nexport const selectChannelName = (state) => state.app.channelName;\n \nexport default appSlice.reducer;\n","import firebase from 'firebase';\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBzZ2JXAL-F0BDN3uafPkKV5s-c9JxA5uM\",\n  authDomain: \"discord-clone-7411f.firebaseapp.com\",\n  databaseURL: \"https://discord-clone-7411f.firebaseio.com\",\n  projectId: \"discord-clone-7411f\",\n  storageBucket: \"discord-clone-7411f.appspot.com\",\n  messagingSenderId: \"485472660269\",\n  appId: \"1:485472660269:web:700b2af2dc284f34b681a4\",\n  measurementId: \"G-9BP6SJB558\",\n};\n\n\nconst firebaseApp =firebase.initializeApp(firebaseConfig);\n\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport { auth, provider };\nexport default db;","import React, { useEffect, useState } from \"react\";\nimport \"./Chat.css\";\nimport ChatHeader from \"./ChatHeader\";\nimport { selectUser } from \"./features/userSlice\";\nimport Message from \"./Message\";\nimport { useSelector } from \"react-redux\";\nimport { selectChannelId, selectChannelName } from \"./features/appSlice\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\n\nfunction Chat() {\n  const user = useSelector(selectUser);\n  const channelId = useSelector(selectChannelId);\n  const channelName = useSelector(selectChannelName);\n\n  const [input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    if (channelId) {\n      db.collection(\"channels\")\n        .doc(channelId)\n        .collection(\"messages\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot((snapshot) =>\n          setMessages(snapshot.docs.map((doc) => doc.data()))\n        );\n    }\n  }, [channelId]);\n\n  const sendMessage = (e) => {\n    e.preventDefault();\n\n    db.collection(\"channels\").doc(channelId).collection(\"messages\").add({\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      message: input,\n      user: user,\n    });\n\n    setInput(\"\");\n  };\n  return (\n    <div className=\"chat\">\n      <ChatHeader channelName={channelName} />\n\n      <div className=\"chat__messages\">\n        {messages.map((message) => (\n          <Message\n            timestamp={message.timestamp}\n            message={message.message}\n            user={message.user}\n          />\n        ))}\n      </div>\n      <div className=\"chat__input\">\n        \n        <form>\n          <input\n          \n            value={input}\n            disabled={!channelId}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder={`Message #${channelName}`}\n          />\n          <button\n            disabled={!channelId}\n            className=\"chat__inputButton\"\n            type=\"submit\"\n            onClick={sendMessage}\n            \n          >\n            \n          </button>\n        </form>\n       \n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","import React from \"react\";\nimport \"./SidebarChannel.css\";\nimport { useDispatch } from \"react-redux\";\nimport { setChannelInfo } from \"./features/appSlice\";\n\nfunction SidebarChannel({ id, channelName }) {\n  const dispatch = useDispatch();\n  return (\n    <div\n      className=\"sidebarChannel\"\n      onClick={() =>\n        dispatch(\n          setChannelInfo({\n            channelId: id,\n            channelName: channelName,\n          })\n        )\n      }\n    >\n      <h6>\n        <span className=\"sidebarChannel__hash\">#</span>\n        {channelName}\n      </h6>\n    </div>\n  );\n}\n\nexport default SidebarChannel;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Sidebar.css\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport SidebarChannel from \"./SidebarChannel\";\nimport { Avatar } from \"@material-ui/core\";\nimport { selectUser } from \"./features/userSlice\";\nimport { useSelector } from \"react-redux\";\nimport db, { auth } from \"./firebase\";\n\nfunction Sidebar() {\n  const user = useSelector(selectUser);\n\n  const [channels, setChannels] = useState([]);\n\n  useEffect(() => {\n    db.collection(\"channels\").onSnapshot((snapshot) =>\n      setChannels(\n        snapshot.docs.map((doc) => ({\n          id: doc.id,\n          channel: doc.data(),\n        }))\n      )\n    );\n  }, []);\n\n  const handleAddChannel = () => {\n    const channelName = prompt(\"Enter a new channel name:\");\n\n    if (channelName) {\n      db.collection(\"channels\").add({\n        channelName: channelName,\n      });\n    }\n  };\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar__top\">\n        \n        <div className=\"sidebar__profile\">\n        <Avatar onClick={() => auth.signOut()} src={user.photo} />\n        <div className=\"sidebar__profileInfo\">\n          <h4>{user.displayName}</h4>\n          \n        </div>\n        \n      </div>\n        \n      </div>\n\n      <div className=\"sidebar__channels\">\n        <div className=\"sidebar__channelsHeader\">\n          <div className=\"sidebar__header\">\n            \n            <h4>Text Channels</h4>\n          </div>\n           \n          <AddIcon onClick={handleAddChannel} className=\"sidebar__addChannel\" />\n        </div>\n        <div className=\"sidebar__channelsList\">\n          {channels.map(({ id, channel }) => (\n            <SidebarChannel\n              key={id}\n              id={id}\n              channelName={channel.channelName}\n            />\n          ))}\n        </div>\n      </div>\n      \n      \n    </div>\n  );\n}\n\nexport default Sidebar;\n","import { Button } from \"@material-ui/core\";\nimport { auth, provider } from \"./firebase\";\nimport React from \"react\";\nimport \"./Login.css\";\n\nfunction Login() {\n  const signIn = () => {\n    auth.signInWithPopup(provider).catch((error) => alert(error.message));\n  };\n\n  return (\n    <div className=\"login\">\n      <div className=\"login__logo\">\n        <img\n          src=\"https://www.freepnglogos.com/uploads/discord-logo-png/discord-logo-logodownload-download-logotipos-1.png\"\n          alt=\"\"\n        />\n\n        <center>\n          <br />\n          <br />\n          <h3>\n            Hi, Buntyyy \n          </h3>\n        </center>\n      </div>\n      <Button onClick={signIn}>Sign In</Button>\n    </div>\n  );\n}\n\nexport default Login;\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance","import React, {useState, useEffect } from 'react';\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\n\r\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\r\nfunction Row({title, fetchUrl, isLargeRow}) {\r\n\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\")\r\n\r\n    useEffect(()=>{\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n\r\n        }\r\n        fetchData();\r\n\r\n    }, [fetchUrl]);\r\n\r\n    const opts ={\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            autoplay: 1,\r\n\r\n        },\r\n        \r\n\r\n    };\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl){\r\n            setTrailerUrl(\"\");\r\n        }\r\n        else{\r\n            movieTrailer(movie?.name || \"\")\r\n            .then((url) => {\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get(\"v\"));\r\n\r\n            })\r\n        }\r\n    }\r\n    return (\r\n        \r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row_posters\">\r\n            {movies.map(movie => (\r\n                <img \r\n                key={movie.id}\r\n                onClick={()=> handleClick(movie)}\r\n                className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                src={`${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt = {movie.name}/>\r\n            ))}\r\n            \r\n            \r\n            </div>\r\n\r\n            {trailerUrl && <Youtube videoId={trailerUrl} opts={opts}/>}\r\n\r\n            \r\n        </div>\r\n        \r\n\r\n    );\r\n}\r\n\r\nexport default Row\r\n","const API_KEY = \"1328bf881d16428c6dcec3f5c912b0a2\";\r\n\r\nconst requests = {\r\n    fetchTrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies:`/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies:`/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies:`/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n\r\n}\r\n\r\nexport default requests;","import React, {useState, useEffect} from 'react'\r\nimport axios from \"./axios\";\r\nimport \"./Banner.css\"\r\nimport requests from \"./request\"\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] =useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchTrending);\r\n            setMovie(\r\n                request.data.results[\r\n                    Math.floor(Math.random()* request.data.results.length-1)\r\n                ]\r\n            );\r\n            return request;\r\n            \r\n\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    function truncate(str, n){\r\n        return str?.length > n ? str.substr(0, n-1)+\"...\":str;\r\n    }\r\n    return (\r\n        <header \r\n        className=\"banner\"\r\n        style={{\r\n            backgroudSize: \"cover\",\r\n            backgroundPosition: \"center center\",\r\n            // eslint-disable-next-line no-template-curly-in-string\r\n            backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`\r\n            \r\n        }}\r\n        >\r\n    \r\n        <div className=\"banner_contents\">\r\n        <h1 className=\"banner_title\">{movie?.title || movie?.name || movie?.original_name}</h1>\r\n\r\n        <div className=\"banner_button\">\r\n\r\n        <button className=\"play\"> Play Now </button>\r\n        \r\n        </div>\r\n\r\n        <h1 className=\"banner_desp\">{truncate(movie?.overview)}</h1>\r\n        \r\n        \r\n\r\n\r\n            \r\n        </div>\r\n        <div className=\"fade\"></div>\r\n        </header>\r\n        \r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport Chat from \"./Chat\";\nimport Sidebar from \"./Sidebar\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUser } from \"./features/userSlice\";\nimport { login, logout } from \"./features/userSlice\";\nimport Login from \"./Login\";\nimport { auth } from \"./firebase\";\nimport Row from \"./Row\";\nimport requests from \"./request\";\nimport Banner from \"./Banner\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const user = useSelector(selectUser);\n\n  \n\n  useEffect(() => {\n    auth.onAuthStateChanged((authUser) => {\n      console.log(\"user is:\", authUser);\n\n      if (authUser) {\n        \n        dispatch(\n          login({\n            uid: authUser.uid,\n            photo: authUser.photoURL,\n            email: authUser.email,\n            displayName: authUser.displayName,\n          })\n        );\n      } else {\n        dispatch(logout());\n        \n      }\n    });\n  }, [dispatch]);\n\n  return (\n    <div className=\"app\">\n      {user ? (\n        <>\n          <Sidebar />\n          <Chat />\n          <Row />\n        </>\n      ) : (\n        <Login />\n      )}\n\n      <div>\n      \n\n      <Banner />\n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl={ requests.fetchNetflixOriginals} isLargeRow/>\n      <Row title=\"TOP RATED\" fetchUrl = {requests.fetchTopRated}/>\n      <Row title=\"Trending\" fetchUrl={ requests.fetchTrending} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n      </div>\n\n    </div>\n      \n\n    \n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport userReducer from \"../features/userSlice\";\nimport appReducer from \"../features/appSlice\";\n\n\nexport default configureStore({\n  reducer: {\n    user: userReducer,\n    app: appReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}