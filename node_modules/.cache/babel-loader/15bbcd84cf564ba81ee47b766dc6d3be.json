{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ABC\\\\Downloads\\\\discord-clone-master\\\\discord-clone-master\\\\src\\\\Row.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row_posters\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, movies.map(movie => /*#__PURE__*/React.createElement(\"img\", {\n    key: movie.id,\n    className: `row_poster ${isLargeRow && \"row_posterLarge\"}`,\n    src: `${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n    alt: movie.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }))));\n}\n\nexport default Row;","map":{"version":3,"sources":["C:/Users/ABC/Downloads/discord-clone-master/discord-clone-master/src/Row.js"],"names":["React","useState","useEffect","axios","Youtube","baseUrl","Row","title","fetchUrl","isLargeRow","movies","setMovies","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","map","movie","id","poster_path","backdrop_path","name"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AAGA,MAAMC,OAAO,GAAG,sCAAhB;;AACA,SAASC,GAAT,CAAa;AAACC,EAAAA,KAAD;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA;AAAlB,CAAb,EAA4C;AAExC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAI;AACV,mBAAeU,SAAf,GAA0B;AACtB,YAAMC,OAAO,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAUN,QAAV,CAAtB;AACAG,MAAAA,SAAS,CAACE,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AAEH;;AACDD,IAAAA,SAAS;AAEZ,GATQ,EASN,CAACJ,QAAD,CATM,CAAT;AAWA,QAAMS,IAAI,GAAE;AACRC,IAAAA,MAAM,EAAE,KADA;AAERC,IAAAA,KAAK,EAAE,MAFC;AAGRC,IAAAA,UAAU,EAAE;AAGRC,MAAAA,QAAQ,EAAE;AAHF;AAHJ,GAAZ;AAYA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKd,KAAL,CADJ,eAGI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCG,MAAM,CAACY,GAAP,CAAWC,KAAK,iBACb;AACA,IAAA,GAAG,EAAEA,KAAK,CAACC,EADX;AAEA,IAAA,SAAS,EAAG,cAAaf,UAAU,IAAI,iBAAkB,EAFzD;AAGA,IAAA,GAAG,EAAG,GAAEJ,OAAQ,GAAEI,UAAU,GAAGc,KAAK,CAACE,WAAT,GAAuBF,KAAK,CAACG,aAAc,EAHvE;AAG0E,IAAA,GAAG,EAAIH,KAAK,CAACI,IAHvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CADD,CAHJ,CADJ;AAmBH;;AAED,eAAerB,GAAf","sourcesContent":["import React, {useState, useEffect } from 'react';\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport Youtube from \"react-youtube\";\r\n\r\n\r\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\r\nfunction Row({title, fetchUrl, isLargeRow}) {\r\n\r\n    const [movies, setMovies] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n\r\n        }\r\n        fetchData();\r\n\r\n    }, [fetchUrl]);\r\n\r\n    const opts ={\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n\r\n\r\n            autoplay: 1,\r\n\r\n        },\r\n        \r\n\r\n    };\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row_posters\">\r\n            {movies.map(movie => (\r\n                <img \r\n                key={movie.id}\r\n                className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                src={`${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt = {movie.name}/>\r\n            ))}\r\n            \r\n            \r\n            </div>\r\n\r\n            \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Row\r\n"]},"metadata":{},"sourceType":"module"}